name: Terraform Workflow

env:
  TF_IN_AUTOMATION: true
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, closed]

permissions:
  contents: read
  pull-requests: write

jobs:
    Terraform-Plan:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Login to Azure
          uses: azure/login@v2
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.5.7

        - name: Terraform Format
          run: terraform fmt -check -recursive
          continue-on-error: true

        - name: Terraform Init
          run: terraform init

        - name: Terraform Validate
          run: terraform validate

        - name: Terraform Plan
          id: plan
          run: terraform plan -out=tfplan -input=false -no-color

        - name: generate random delimiter
          run: echo "DELIMITER=$(uuidgen)" >> $GITHUB_ENV

        - name: truncate terraform plan result
          run: |
            echo "PLAN<<${{ env.DELIMITER }}" >> $GITHUB_ENV
            echo '[maybe truncated]' >> $GITHUB_ENV
            tail --bytes=65000 <<'${{ env.DELIMITER }}' >> $GITHUB_ENV
            ${{ format('{0}{1}', steps.plan.outputs.stderr, steps.plan.outputs.stdout) }}
            ${{ env.DELIMITER }}
            echo >> $GITHUB_ENV
            echo "${{ env.DELIMITER }}" >> $GITHUB_ENV

        - name: post plan as sticky comment
          if: ${{ github.event_name == 'pull_request' }}
          uses: marocchino/sticky-pull-request-comment@v2
          with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            header: plan
            message: |
              #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              
              ```
              ${{ env.PLAN }}
              ```
              
              </details>
          continue-on-error: true

        - name: Terraform Plan Status
          if: ${{ steps.plan.outcome == 'failure' }}
          run: exit 1

        - name: Upload tfplan artifact
          if: github.event_name == 'push'
          uses: actions/upload-artifact@v4
          with:
            name: tfplan
            path: tfplan

    Terraform-Apply:
      runs-on: ubuntu-latest
      environment: prod
      if: github.event_name == 'push'

      needs: Terraform-Plan
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
              terraform_version: 1.5.7

        - name: Terraform Init
          run: terraform init

        - name: Download tfplan artifact
          uses: actions/download-artifact@v4
          with:
            name: tfplan
            path: .

        - name: Terraform Apply
          run: terraform apply -input=false tfplan
